"use strict";(self.webpackChunk_2004_scape_dev=self.webpackChunk_2004_scape_dev||[]).push([[5982],{7853:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"server/architecture/overview","title":"Architecture Overview","description":"This document provides a high-level overview of the Lost City Server architecture, illustrating how different components interact to create a complete RuneScape 2 emulation system.","source":"@site/docs/server/architecture/overview.md","sourceDirName":"server/architecture","slug":"/server/architecture/overview","permalink":"/2004Scape-dev/server/architecture/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/awilliamson10/2004Scape-dev/tree/main/docs/server/architecture/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"Sidebar","previous":{"title":"Server Overview","permalink":"/2004Scape-dev/server/overview"},"next":{"title":"Component Architecture","permalink":"/2004Scape-dev/server/architecture/components"}}');var a=t(4848),s=t(8453);const i={sidebar_position:1},o="Architecture Overview",c={},l=[{value:"System Architecture",id:"system-architecture",level:2},{value:"Component Relationships",id:"component-relationships",level:2},{value:"Data Flow",id:"data-flow",level:2},{value:"Deployment Architecture",id:"deployment-architecture",level:2},{value:"Technical Stack",id:"technical-stack",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"architecture-overview",children:"Architecture Overview"})}),"\n",(0,a.jsx)(n.p,{children:"This document provides a high-level overview of the Lost City Server architecture, illustrating how different components interact to create a complete RuneScape 2 emulation system."}),"\n",(0,a.jsx)(n.h2,{id:"system-architecture",children:"System Architecture"}),"\n",(0,a.jsx)(n.p,{children:"The Lost City Server is built using a modular architecture that separates concerns and allows different components to evolve independently. The diagram below shows the main systems and their relationships:"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart TD\n    Client[Client] <--\x3e Network[Network Layer]\n    Network <--\x3e ServerComponents[Server Components]\n    ServerComponents <--\x3e Engine[Game Engine]\n    Engine <--\x3e WorldSystem[World System]\n    Engine <--\x3e RuneScript[RuneScript Interpreter]\n    WorldSystem <--\x3e Database[Database]\n    RuneScript <--\x3e ContentSystem[Content System]\n    Cache[Cache System] --\x3e Engine\n    Cache --\x3e NetworkProtocol[Network Protocol]\n    \n    subgraph Core Systems\n        Engine\n        WorldSystem\n        RuneScript\n    end\n    \n    subgraph Infrastructure\n        Network\n        Cache\n        Database\n    end\n    \n    subgraph Game Content\n        ContentSystem\n        ServerComponents\n    end\n\n    class Client external\n    classDef external fill:#f9f,stroke:#333,stroke-width:2px"}),"\n",(0,a.jsx)(n.h2,{id:"component-relationships",children:"Component Relationships"}),"\n",(0,a.jsx)(n.p,{children:"The server consists of several key components that work together:"}),"\n",(0,a.jsx)(n.mermaid,{value:'flowchart TB\n    subgraph Engine["Game Engine"]\n        Tick[Tick System] --\x3e EntityMgmt[Entity Management]\n        EntityMgmt --\x3e WorldState[World State]\n    end\n    \n    subgraph Network["Network Layer"]\n        TCP[TCP Server] --\x3e Protocol[Protocol Handlers]\n        WS[WebSocket Server] --\x3e Protocol\n        Protocol --\x3e PacketHandlers[Packet Handlers]\n    end\n    \n    subgraph Components["Server Components"]\n        Login[Login System] --\x3e Friend[Friend System]\n        Login --\x3e Chat[Chat System]\n        World[World System] --\x3e Player[Player Management]\n        World --\x3e NPC[NPC Management]\n    end\n    \n    subgraph Content["Content System"]\n        Scripts[RuneScript Files] --\x3e CommandProcs[Commands & Procedures]\n        Maps[Map Data] --\x3e WorldBuilder[World Builder]\n        Items[Item Definitions] --\x3e ItemSystem[Item System]\n    end\n    \n    subgraph Cache["Cache System"]\n        AssetLoader[Asset Loader] --\x3e ModelCache[Model Cache]\n        AssetLoader --\x3e MapCache[Map Cache]\n        AssetLoader --\x3e SpriteCache[Sprite Cache]\n    end\n    \n    subgraph Database["Database"]\n        PlayerData[Player Data] --\x3e Inventory[Inventory]\n        PlayerData --\x3e Stats[Stats]\n        PlayerData --\x3e Quests[Quest Progress]\n    end\n    \n    Network <--\x3e Components\n    Components <--\x3e Engine\n    Engine <--\x3e Content\n    Engine <--\x3e Cache\n    Components <--\x3e Database\n    Content <--\x3e Cache'}),"\n",(0,a.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,a.jsx)(n.p,{children:"This diagram shows how data flows through the system when a player performs an action:"}),"\n",(0,a.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Client\n    participant Network as Network Layer\n    participant GameServer as Game Server\n    participant Engine as Game Engine\n    participant RuneScript as RuneScript\n    participant World as World System\n    participant DB as Database\n    \n    Client->>Network: Send Action Packet\n    Network->>GameServer: Decode Packet\n    GameServer->>Engine: Process Player Action\n    Engine->>RuneScript: Execute Script Command\n    RuneScript->>World: Update World State\n    World->>DB: Persist Changes\n    World->>Engine: Notify of State Change\n    Engine->>GameServer: Prepare Update Packets\n    GameServer->>Network: Encode Update Packets\n    Network->>Client: Send Updates"}),"\n",(0,a.jsx)(n.h2,{id:"deployment-architecture",children:"Deployment Architecture"}),"\n",(0,a.jsx)(n.p,{children:"The server can be deployed in different configurations depending on requirements:"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart TD\n    subgraph ClientSide[Client Side]\n        WebClient[Web Client]\n        StandaloneClient[Standalone Client]\n    end\n    \n    subgraph ServerSide[Server Side]\n        subgraph WebServer[Web Server]\n            Static[Static Assets]\n            APIEndpoints[API Endpoints]\n        end\n        \n        subgraph GameServer[Game Server]\n            LoginServer[Login Server]\n            WorldServer[World Server]\n        end\n        \n        subgraph Database[Database]\n            PlayerDB[Player Database]\n            ContentDB[Content Database]\n        end\n        \n        subgraph CacheServer[Cache Server]\n            ModelCache[Model Cache]\n            MapCache[Map Cache]\n            SpriteCache[Sprite Cache]\n        end\n    end\n    \n    WebClient --\x3e WebServer\n    WebClient --\x3e GameServer\n    StandaloneClient --\x3e GameServer\n    WebServer --\x3e GameServer\n    GameServer --\x3e Database\n    GameServer --\x3e CacheServer\n    \n    classDef client fill:#f9f,stroke:#333,stroke-width:1px\n    classDef server fill:#bbf,stroke:#333,stroke-width:1px\n    classDef database fill:#bfb,stroke:#333,stroke-width:1px\n    \n    class WebClient,StandaloneClient client\n    class WebServer,GameServer,CacheServer server\n    class Database database"}),"\n",(0,a.jsx)(n.h2,{id:"technical-stack",children:"Technical Stack"}),"\n",(0,a.jsx)(n.p,{children:"The Lost City Server is built using the following technologies:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Component"}),(0,a.jsx)(n.th,{children:"Technology"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Server Runtime"}),(0,a.jsx)(n.td,{children:"Node.js"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Language"}),(0,a.jsx)(n.td,{children:"TypeScript"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Database"}),(0,a.jsx)(n.td,{children:"Prisma ORM with PostgreSQL"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Network"}),(0,a.jsx)(n.td,{children:"WebSockets and TCP sockets"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"HTTP Server"}),(0,a.jsx)(n.td,{children:"Express.js"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Testing"}),(0,a.jsx)(n.td,{children:"Vitest"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Build System"}),(0,a.jsx)(n.td,{children:"npm/pnpm"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Content Parsing"}),(0,a.jsx)(n.td,{children:"Custom RuneScript interpreter"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Caching"}),(0,a.jsx)(n.td,{children:"In-memory caching with file system persistence"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(n.p,{children:"Detailed documentation for each component will be provided in the following sections:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/2004Scape-dev/server/architecture/components",children:"Component Details"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/2004Scape-dev/server/architecture/data-flow",children:"Data Flow"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/2004Scape-dev/server/architecture/deployment",children:"Deployment Architecture"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);